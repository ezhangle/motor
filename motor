#!/usr/bin/python3

import http.server
import sys
import os
import shutil
import subprocess
import glob
import zipfile

motor_dir = os.path.dirname(sys.argv[0])

search_path = [motor_dir + "/build"] 
#, motor_dir + "/html"]

def findNewestDataFile(directory):
  newest = 0
  for name in os.listdir(directory):
    if directory == '.' and name.startswith('_'):
      continue

    entry = os.path.join(directory, name)
    if os.path.isdir(entry):
      newest = max(newest, findNewestDataFile(entry))
    elif os.path.isfile(entry):
      newest = max(newest, os.path.getmtime(entry))

  return newest


def repackage():
  if not os.path.exists('_build'):
    os.mkdir('_build')

  datafilemtime = os.path.exists('_build/game.love') and os.path.getmtime('_build/game.love') or 0
  if datafilemtime < findNewestDataFile('.'):
    print("Rebuilding package")
    with zipfile.ZipFile("_build/game.love", "w", zipfile.ZIP_DEFLATED) as zip:
      for a,b,c in os.walk("."):
        if a.startswith("./_"):
          continue
        print(a)
        if a != '.':
          zip.write(a)
        for i in c:
          zip.write(os.path.join(a,i))

local_motor_path = os.getcwd() + "/_motor"
if os.path.exists(local_motor_path):
  search_path = [local_motor_path] + search_path

local_build_path = os.getcwd() + "/_build"
if os.path.exists(local_build_path):
  search_path = [local_build_path] + search_path

def findFile(name):
  for i in search_path:
    if of.path.exists(i + "/" + name):
      return i + "/" + name

if sys.argv[1] == "serve":
  class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def translate_path(self, path):
      p = super(RequestHandler, self).translate_path(path)

      bn = os.path.relpath(p)

      for i in search_path:
        if os.path.exists(os.path.join(i, bn)):
          p = os.path.join(i, bn)

      return p

    def do_GET(self):
      if self.path == '/game.love':
        repackage()

      super(RequestHandler, self).do_GET()

    def do_HEAD(self):
      if self.path == '/game.love':
        repackage()

      super(RequestHandler, self).do_HEAD()

  server = http.server.HTTPServer(('', 8000), RequestHandler)

  server.serve_forever()

elif sys.argv[1] == "pack":
  pass
  
